#!/bin/bash

function get_password {
  local ssid="$@"

  # Extracts the password from the file, but is prepended by "psk="
  # In the event that the grep fails because the ssid does not exist, echo a
  # failure message. There are 4 spaces appended to it so that I don't lose any
  # of the message when the first four characters get taken out on the next line
  # in the function.

  # -h flag says to not show the file it came from, just the contents
  local password=$(sudo grep "psk=" "$ssid" -Rh 2> /dev/null || \
                   echo "    Failed. SSID Does not exist")

  # This gets rid of "psk="
  echo ${password:4}
}

function list {
  # Only show the ssids that have a password shown
  sudo grep "psk=" * -Rl
}


cd /etc/NetworkManager/system-connections/
# Make sure that we actually made it into the folder
if [ $? -ne 0 ]; then
  echo "\"/etc/NetworkManager/system-connections/\" does not exist"
  exit 1;
fi

# If no arguments are passed, assume to find the password of the current
# connection
if [[ -z "$@" ]]; then
  # Get the SSID of the currently connected network
  ssid=$(iwgetid -r)
  if [ -z "$ssid" ]; then
    echo "Could not determine SSID"
    exit 1;
  fi

  echo $(get_password "$ssid")

# List known networks
elif [ "$1" == "-ls" ]; then
  list

elif [ "$1" == "-h" ]; then
  echo "HELP MENU"
  echo ""
  echo "Tab Completion is also available for this script."
  echo ""
  echo "If no arguments are passed, get the password of the current wifi"
  echo "connection"
  echo ""
  echo "You can also use an SSID as an argument and get the wifi password for"
  echo "that network as long as you have used that network before."
  echo ""
  echo "use the -ls argument to get a list of SSIDs that you can use"
  echo ""
  echo ""
  echo "Examples:"
  echo ""
  echo "    $ get-wifi-password my_wifi"
  echo "    my very complicated password"

# check $1 and get the wifi password for that network
else
  echo $(get_password "$@")
fi
